// Question - N-Queen

class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans=new ArrayList<>();
        char[][] board=new char[n][n];
        for(char[] i:board)
        Arrays.fill(i,'.');
        solve(0,board,ans);
        return ans;
    }
    static List < String > construct(char[][] board) {
        List < String > res = new LinkedList < String > ();
        for (int i = 0; i < board.length; i++) {
            String s = new String(board[i]);
            res.add(s);
        }
        return res;
    }
    public void solve(int ind,char[][] board, List<List<String>> ans){
        if(ind == board.length){
            ans.add(construct(board));
            return;
        }
        for(int i=0;i<board.length;i++){
            if(validate(board, i, ind)){
                board[i][ind]='Q';
                // row.add(String.valueOf(board[ind]));
                solve(ind+1,board,ans);
                // row.remove(row.size()-1);
                board[i][ind]='.';
            }
            // else{return;}
        }
        return;
    }
     static boolean validate(char[][] board, int row, int col) {
        int duprow = row;
        int dupcol = col;
        while (row >= 0 && col >= 0) {
            if (board[row][col] == 'Q') return false;
            row--;
            col--;
        }

        row = duprow;
        col = dupcol;
        while (col >= 0) {
            if (board[row][col] == 'Q') return false;
            col--;
        }

        row = duprow;
        col = dupcol;
        while (col >= 0 && row < board.length) {
            if (board[row][col] == 'Q') return false;
            col--;
            row++;
        }
        return true;
    }
    // public boolean isPossible(int r,int c,char[][] board){
    //     int i=r,j=c;
    //     while(i<board.length && j>=0){
    //         if(board[i][j] == 'Q')return false;
    //         i++;
    //         j--;
    //     }
    //     for(int x=c;x>=0;x--){
    //         if(board[r][x]=='Q')return false;
    //     }
    //     i=r;
    //     j=c;
    //     while(i>=0 && j>=0){
    //         if(board[i][j] == 'Q')return false;
    //         i--;
    //         j--;
    //     }
    //     return true;
    // }
}
